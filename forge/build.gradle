plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    forge()
}

base {
    archivesName = "reaping-forge-${minecraft_version}"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "reaping.forge.mixins.json"
        mixinConfig "reaping.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge libs.forge
    modApi libs.architectury.forge
    modImplementation libs.jamlib.forge
    modImplementation libs.pehkui.forge

    // Dependency of JamLib
    forgeRuntimeLibrary "blue.endless:jankson:1.2.3"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

if (System.getenv("CURSEFORGE_API_KEY") != null && System.getenv("MODRINTH_API_KEY") != null) {
    unifiedPublishing {
        project {
            displayName = "V${project.version} (Forge ${project.minecraft_version})"
            changelog = rootProject.file("CHANGELOG.md").text
            releaseType = project.version.contains("beta") ? "beta" : "release"
            gameVersions = [project.minecraft_version]
            gameLoaders = ["forge"]

            mainPublication tasks.remapJar

            relations {
                depends {
                    curseforge = "architectury-api"
                    modrinth = "architectury-api"
                }

                depends {
                    curseforge = "jamlib"
                    modrinth = "jamlib"
                }

                depends {
                    curseforge = "pehkui"
                    modrinth = "pehkui"
                }
            }

            curseforge {
                token = System.getenv("CURSEFORGE_API_KEY")
                id = ""
                gameLoaders.add("NeoForge")
            }

            modrinth {
                token = System.getenv("MODRINTH_API_KEY")
                id = ""
                gameLoaders.add("neoforge")
            }
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
